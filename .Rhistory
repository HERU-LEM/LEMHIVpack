} else if (case == "SA"){
Int.Scale.ls        <- setNames(lapply(ls(pattern="^IntScale."), get), ls(pattern="^IntScale."))
All.Costs.ls.list   <- readRDS(paste0("PSA/", CITY, "-All.Costs.rds"))
State.QALYs.ls.list <- readRDS(paste0("PSA/", CITY, "-StateQALYs.rds"))
Int.Baseline.ls.list<- readRDS(paste0("PSA/", CITY, "-IntBaseline.rds"))
Int.Eff.ls.list     <- readRDS(paste0("PSA/", CITY, "-IntEff.rds"))
if(file.exists(paste0("Inputs/AllParams-Combination-SA-", CITY, ".rds"))){
all.params.list   <- readRDS(paste0("Inputs/AllParams-Combination-SA-", CITY, ".rds"))
} else if (!file.exists(paste0("Inputs/AllParams-Combination-SA-", CITY, ".rds"))){
all.params.list   <- readRDS(paste0("PSA/", CITY, "-vparameters.rds"))
saveRDS(all.params.list, paste0("Inputs/AllParams-Combination-SA-", CITY, ".rds"))
}
}
#############################################################################
# 2. LOAD CITY COMPARATOR (Status Quo)
#############################################################################
# STATUS QUO (NAMING OF READ IN FILES TO BE UPDATED)
if (case == "DM"){
if(file.exists(paste0("Inputs/Combination-DM-", CITY, "-refcase.rds"))){    # all population list of each compartment at each step
## Load reference case
refcase.ls <- readRDS(paste0("Inputs/Combination-DM-", CITY, "-refcase.rds"))
if(file.exists(paste0("Inputs/Combination-DM-", CITY, "-refcase-outcomes.rds"))){  # CEA outcomes of deterministic case
refcase.cea.utcomes <- readRDS(paste0("Inputs/Combination-DM-", CITY, "-refcase-outcomes.rds"))
} else if(!file.exists(paste0("Inputs/Combination-DM-", CITY, "-refcase-outcomes.rds"))){
warning("Reference case outcomes data are missing")
}
if(file.exists(paste0("Inputs/Combination-DM-", CITY, "-refcase-infections.rds"))){ # Incidence outcomes of deterministic case
refcase.infs <- readRDS(paste0("Inputs/Combination-DM-", CITY, "-refcase-infections.rds"))
} else if(!file.exists(paste0("Inputs/Combination-DM-", CITY, "-refcase-infections.rds"))){
warning("Reference case infections data are missing")
}
} else if (!file.exists(paste0("Inputs/Combination-DM-", CITY, "-refcase.rds"))){
## Settings for reference
refcase.ls <- intervention.model.combination (input.parameters = all.params,
current.int      = c("No interventions"))
## ACCUMULATE COSTS & QALYs
refcase.cea.outcomes <- accum.outcomes.combination (input.parameters = all.params,
pop.in           = refcase.ls[, 1:19, ],
current.int      = c("No interventions"),
sums.only        = TRUE)
# Get number of infections over the evaluation period
refcase.infs <- time.period.infections(simul.in     = refcase.ls,
start.period = start.proj,
end.period   = end.proj,
sust.period  = int.sus)
### SAVE REFERENCE OUTCOMES
saveRDS(refcase.ls,           paste0("Inputs/Combination-DM-", CITY, "-refcase.rds"))
saveRDS(refcase.cea.outcomes, paste0("Inputs/Combination-DM-", CITY, "-refcase-outcomes.rds"))
saveRDS(refcase.infs,         paste0("Inputs/Combination-DM-", CITY, "-refcase-infections.rds"))
}
} else if (case == "SA"){
if(file.exists(paste0("Inputs/Combination-SA-", CITY, "-refcase-outcomes.rds"))){
refcase.cea.outcomes.temp <- readRDS(paste0("Inputs/Combination-SA-", CITY, "-refcase-outcomes.rds"))
if(file.exists(paste0("Inputs/Combination-SA-", CITY, "-refcase-infections.rds"))){
refcase.infs.temp <- readRDS(paste0("Inputs/Combination-SA-", CITY, "-refcase-infections.rds"))
refcase.infs      <- refcase.infs.temp[1 : param.sets]
rm(refcase.infs.temp)
} else if(!file.exists(paste0("Inputs/Combination-SA-", CITY, "-refcase-infections.rds"))){
warning("Reference case infections data are missing")
}
refcase.cea.outcomes <- refcase.cea.outcomes.temp[1:param.sets]
rm(refcase.cea.outcomes.temp)
} else if (!file.exists(paste0("Inputs/Combination-SA-", CITY, "-refcase-outcomes.rds"))){
if (file.exists(paste0("Inputs/", CITY, "-2040-refcase.rds"))){      #list restoring the population lists of reference case from 2000 PSA: >4GB
refcase.ls.temp <- readRDS(paste0("Inputs/", CITY, "-2040-refcase.rds"))
} else if (!file.exists(paste0("Inputs/", CITY, "-2040-refcase.rds"))){
refcase.ls.temp <- foreach(kk=1:param.sets, .export = export.int.model.names
) %dopar% {
out.ls.int <- intervention.model.combination(
input.parameters = all.params.list[[kk]],
current.int = c("No interventions"))
}
saveRDS(refcase.ls.temp, paste0("Inputs/", CITY, "-2040-refcase.rds"))
}
refcase.infs         <- vector("list", param.sets)
refcase.cea.outcomes <- vector("list", param.sets)
for(p in 1:param.sets){
## Set parameters
refcase.pop       <- refcase.ls.temp[[p]]
refcase.infs[[p]] <- time.period.infections (simul.in     = refcase.pop,
start.period = start.proj,
end.period   = end.proj,
sust.period  = int.sus)
## Set parameters
all.params         <- all.params.list[[p]]
StateQALYs         <- State.QALYs.ls.list[[p]]
#These were unused in PSA for reference case but required by the function
All.Costs.ls       <- All.Costs.ls.list[[p]]
Int.Baseline.ls    <- Int.Baseline.ls.list[[p]]
Int.Eff.ls         <- Int.Eff.ls.list[[p]]
## ACCUMULATE COSTS & QALYs
refcase.cea.outcomes[[p]] <- accum.outcomes.combination(input.parameters = all.params,
pop.in           = refcase.pop[, 1:19, ],
current.int      = c("No interventions"),
sums.only        = TRUE)
}
saveRDS(refcase.infs,         paste0("Inputs/Combination-SA-", CITY, "-refcase-infections.rds"))
saveRDS(refcase.cea.outcomes, paste0("Inputs/Combination-SA-", CITY, "-refcase-outcomes.rds"))
}
} #END "SA"/"DM" Loop
# Clean workspace by using lists for scale & costs (rm at end of file)
rm(list = ls(pattern = "(^IntCosts.)|(^StateCosts.)|(^IntScale.)|(^IntEff.)"))
## LOAD all input parameters and comparators
source("01_Setup/CascadeCEA-Interventions-1-LoadParameterWorkspace-Combination.R")
total.comb <- length(combination.list)
tic("Model run")
outcome.comb.mx <- matrix(0, nrow = total.comb, ncol = 44)    ##Initialize combination outcome matrix (to save results)
outcome.comb.mx <- foreach(cc=1:total.comb, .combine=rbind, .export = export.int.model.names
) %dopar% {
comb.eva.func(input.parameters = all.params, current.int = interventions[combination.list[[cc]]])
}
future:::ClusterRegistry("stop")   ##Stop parallel estimations and free cores
colnames(outcome.comb.mx)        <- rep("FILL", 44)
colnames(outcome.comb.mx)[1:6]   <- c("Infections.total-20Y", "SuscPY-over20Y", "Infections.total-10Y", "SuscPY-over10Y", "Infections.total-5Y", "SuscPY-over5Y")
colnames(outcome.comb.mx)[7:32]  <- paste0("Year", c(2015:2040))
colnames(outcome.comb.mx)[33:44] <- c("QALYs.sum", "costs.total.sum", "costs.hru.sum", "costs.art.sum", "costs.art.ini.sum",
"costs.oat.sum", "costs.prep.sum", "costs.prep.tests.sum", "costs.test.sum", "int.costs.sum",
"int.impl.costs.sum", "int.sust.costs.sum")
saveRDS(outcome.comb.mx,   paste0("Combination/Outcome-All-Combination-", CITY, "-DM.rds"))
toc()
# Run model and accumulate outcomes (deterministic and PSA, for optimal combination implmentation strategy identifed at documented scale)
# This module allows users to run deterministic and PSA for optimal combination implementation strategy at documented scale
# PREREQUISITE: run documented and determine the production function first
#############################################################################
# 1. SET directory and workspace
#############################################################################
rm(list=ls())
library(rstudioapi)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
# SELECT city ##
CITY <- select.list(all.cities, multiple = FALSE,
title = 'Select city', graphics = FALSE)
#############################################################################
## Cascade CEA Model - Combination Interventions
## Produce the CEA table comparing the OCIS with the comparator, with 95% CI
## Last update: March 16, 2020
#############################################################################
############################################################################################
rm(list=ls())
library(rstudioapi)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
cea.table           <- matrix(0, ncol = 11, nrow = 6)
colnames(cea.table) <- c("IncrementalCost_pe", "IncrementalCost_low", "IncrementalCost_up",
"IncrementalQALY_pe", "IncrementalQALY_low", "IncrementalQALY_up",
"ICER_pe", "ICER_low", "ICER_up", "%cost-effective", "%cost-saving")
rownames(cea.table) <- c("Atlanta", "Baltimore", "Los Angeles", "Miami", "New York City", "Seattle")
CEthreshold         <- 100000
city.name.list      <- c("Atlanta", "Baltimore", "Los Angeles", "Miami", "New York City", "Seattle")
combination.list    <- readRDS("Combination/Combination.list.rds")
for (ww in 1:6){
CITY       <- all.cities[ww]
CITY.name  <- city.name.list[ww]
frontier   <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$frontier
ocis       <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$ocis
comparator <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$comparator
#Derministic results
outcome.comb   <- readRDS(paste0("Combination/Outcome-All-Combination-", CITY, "-DM.rds"))
comp.matrix    <- outcome.comb[c(comparator, ocis) , c("QALYs.sum", "costs.total.sum")]
#PSA results
ocis.mx         <- readRDS(paste0("Combination/Outcome-Combination-", CITY, "-PSA-", ocis,"(OCIS).rds"))[ , c("QALYs.sum", "costs.total.sum")]
comparator.mx   <- readRDS(paste0("Combination/Outcome-Combination-", CITY, "-PSA-", comparator,"(Comparator).rds"))[ , c("QALYs.sum", "costs.total.sum")]
outcome.SA.ref  <- readRDS(paste0("Inputs/Combination-SA-", CITY, "-refcase-outcomes.rds"))
ref.matrix      <- matrix(0, nrow = 2000, ncol =2)
ref.matrix[ ,1] <- unlist(lapply(outcome.SA.ref, "[[", 1))
ref.matrix[ ,2] <- unlist(lapply(outcome.SA.ref, "[[", 2))
####in comparison to next best ####
quantile((ocis.mx[ , "costs.total.sum"] - ref.matrix[ ,2]), c(0.025, 0.975)) / 1000000
quantile((ocis.mx[ , "QALYs.sum"] - ref.matrix[ ,1]), c(0.025, 0.975))
cost.col <- 2; qaly.col <-1
cea.table[CITY.name, "IncrementalCost_pe"] <- comp.matrix[2, cost.col] - comp.matrix[1, cost.col]
cea.table[CITY.name, c("IncrementalCost_low", "IncrementalCost_up")] <- quantile((ocis.mx[ , "costs.total.sum"] - comparator.mx[ , "costs.total.sum"]), c(0.025, 0.975))
cea.table[CITY.name, "IncrementalQALY_pe"] <- comp.matrix[2, qaly.col] - comp.matrix[1, qaly.col]
cea.table[CITY.name, c("IncrementalQALY_low", "IncrementalQALY_up")] <- quantile((ocis.mx[ , "QALYs.sum"] - comparator.mx[ , "QALYs.sum"]), c(0.025, 0.975))
cea.table[CITY.name, "ICER_pe"] <- (comp.matrix[2, cost.col] - comp.matrix[1, cost.col]) / (comp.matrix[2, qaly.col] - comp.matrix[1, qaly.col])
cea.table[CITY.name, c("ICER_low", "ICER_up")] <- quantile((ocis.mx[ , "costs.total.sum"] - comparator.mx[ , "costs.total.sum"]) /
(ocis.mx[ , "QALYs.sum"] - comparator.mx[ , "QALYs.sum"]), c(0.025, 0.975))
cea.table[CITY.name, "%cost-effective"] <- sum(((ocis.mx[ , "costs.total.sum"] - comparator.mx[ , "costs.total.sum"]) /
(ocis.mx[ , "QALYs.sum"] - comparator.mx[ , "QALYs.sum"])) < CEthreshold) / 2000   # %cost-effective
cea.table[CITY.name, "%cost-saving"]    <- length(which(ocis.mx[ , "costs.total.sum"] - ref.matrix[ , cost.col] < 0)) / 2000   # %cost-saving
}
write.csv(cea.table,'Outputs/CEA Table/CEATable(range).csv')
#############################################################################################
## Cascade CEA Model - Combination Interventions
## Plot production functions in a 6-panel graph
## Last updated: March 11, 2020
############################################################################################
rm(list=ls())
library(rstudioapi)
library(Hmisc)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
CITY.list <- c("ATL", "BAL", "LA", "MIA", "NYC", "SEA")
CITY.name <- c("(A) Atlanta", " (B) Baltimore", "(C) Los Angeles", "(D) Miami", "(E) New York City", "(F) Seattle")
par(mfrow = c(3, 2))
par(mar=c(3.8,3.8,1,1), oma = c(1, 1, 1, 1))
for (cc in 1:6){
CITY <- CITY.list[cc]
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
combination.list <- readRDS("Combination/Combination.list.rds")
frontier         <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$frontier
ocis             <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$ocis
outcome.comb     <- readRDS(paste0("Combination/Outcome-All-Combination-", CITY, "-DM.rds"))
outcome.ref      <- unlist(readRDS(paste0("Inputs/Combination-DM-", CITY, "-refcase-outcomes.rds")))
frontier.matrix  <- rbind(outcome.ref[c("QALYs.sum", "costs.total.sum")], outcome.comb[frontier , c("QALYs.sum", "costs.total.sum")])
Strategy.ind     <- c(0, frontier)
frontier.matrix  <- cbind(Strategy.ind, frontier.matrix)
costsCol <- 3; qalyCol <- 2
#frontier matrix, first row is reference case
frontier.matrix[ , qalyCol]  <- frontier.matrix[ , qalyCol] - frontier.matrix[1, qalyCol]
frontier.matrix[ , costsCol] <- frontier.matrix[ , costsCol] - frontier.matrix[1, costsCol]
frontier.matrix  <- frontier.matrix[-1, ]  #remove the reference case
frontier.matrix[ , costsCol] <- frontier.matrix[ , costsCol] / 1000000
#matrix for other dominated strategies
other_comb          <- outcome.comb[-frontier , c("QALYs.sum", "costs.total.sum")]
other_comb.mx       <- other_comb
other_comb.mx[ , 1] <- other_comb.mx[ , 1] - outcome.ref["QALYs.sum"]
other_comb.mx[ , 2] <- other_comb.mx[ , 2] - outcome.ref["costs.total.sum"]
other_comb.mx[ , 2] <- other_comb.mx[ , 2] / 1000000
xlim <- c(min(frontier.matrix[ , costsCol]) *1.2, max(other_comb.mx[ , 2]* 1.02))
ylim <- c(0 , max(frontier.matrix[ , qalyCol])*1.25)
plot(frontier.matrix[ , costsCol],  frontier.matrix[ , qalyCol], col = adjustcolor("dodgerblue", alpha = 0.8) , pch = 16, xlab="Incremental cost, versus statuo quo (US$, million)", ylab="Incremental QALYs, versus status quo", xlim=xlim, ylim=ylim, cex=1.2, cex.axis=0.95)
points(other_comb.mx[,2], other_comb.mx[,1], col = adjustcolor("lightgrey", alpha = 0.5), pch=16, cex = 0.5)
points(frontier.matrix[ , costsCol],  frontier.matrix[ , qalyCol], col = adjustcolor("dodgerblue", alpha = 0.8) , pch = 16)
lines(frontier.matrix[ , costsCol], frontier.matrix[ , qalyCol], col = adjustcolor("dodgerblue", alpha = 0.8), lwd=2)
points(frontier.matrix[which(frontier == ocis) , costsCol],  frontier.matrix[which(frontier == ocis) , qalyCol], col = adjustcolor("firebrick2", alpha = 1) , cex = 1.25, pch = 16)
abline(v = 0, lty=3, col = "grey")
title(CITY.name[cc], adj = 0.02, line = - 1)
minor.tick(nx=2, ny=2)
legend(x="bottomright",
legend=c(paste0("OCIS (", CITY, ")"), "Strategies on PF","Other strategies"),
col=c("dodgerblue","firebrick2", "lightgrey"),
lwd=c(1.2, 1, 0.5), lty = c(1, NA, NA), pch=c(16, 16,16), pt.cex = c(1,1.1,1), cex = 0.8, bty = "n")
}
#############################################################################################
## Cascade CEA Model - Combination Interventions (Core)
## Derive the disaggregated cost estimates of selected OCIS for each city
## Last updated: March 15, 2020
############################################################################################
rm(list=ls())
library(rstudioapi)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
## LOAD ODE function
#source("R/CascadeCEA-Model-0-Function-ode_model-Combination.R")
## SELECT city ##
CITY <- select.list(all.cities, multiple = FALSE,
title = 'Select city', graphics = FALSE)
# ww= 1; CITY <- all.cities[ww]
## LOAD inputs and ntervention ##
case             <- "DM"  # DM for deterministic, SA for sensitivity analysis
load.status.quo  <- TRUE
sums.only        <- FALSE
Discounting      <- 0.03
combination.list <- readRDS("Combination/Combination.list.rds")
ocis             <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$ocis
source("01_Setup/CascadeCEA-Interventions-1-LoadParameterWorkspace-Combination.R")
current.int = interventions[combination.list[[ocis]]]
## RUN the model ##
out.ls.int <- intervention.model.combination(input.parameters = all.params,
current.int = current.int)
out.ls.accum.int <- accum.outcomes.combination(input.parameters = all.params,
pop.in           = out.ls.int[, 1:19, ],
current.int      = current.int,
sums.only        = sums.only)
saveRDS(out.ls.accum.int, paste0("Outputs/CostBreakdown/CostBreakdown-", CITY, "-Strategy-", ocis,"-documented.rds"))
devtools::document()
devtools::document()
getwd()
devtools::build_site()
backports::
require(devtools)
install_version("backports", version = "1.1.0")
library(backports)
install.packages("backports")
devtools::document()
install.packages("backports")
devtools::document()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
# Run model and accumulate outcomes (deterministic)
# This module allows for city selection, loads list of intervention combinations, loads ordinary differential equation functions,
# analysis scenario (deterministic or sensitivity analysis), and loads input parameters and comparators.
# It also provides code for running parallel estimations.
#############################################################################
# 1. SET directory and workspace
#############################################################################
rm(list=ls())
library(rstudioapi)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
# SELECT city ##
CITY <- select.list(all.cities, multiple = FALSE,
title = 'Select city', graphics = FALSE)
#############################################################################################
## Cascade CEA Model - Combination Interventions (Core)
## Derive the disaggregated cost estimates of selected OCIS for each city
## Last updated: March 15, 2020
############################################################################################
rm(list=ls())
library(rstudioapi)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
## LOAD ODE function
#source("R/CascadeCEA-Model-0-Function-ode_model-Combination.R")
## SELECT city ##
CITY <- select.list(all.cities, multiple = FALSE,
title = 'Select city', graphics = FALSE)
## LOAD inputs and ntervention ##
case             <- "DM"  # DM for deterministic, SA for sensitivity analysis
load.status.quo  <- TRUE
sums.only        <- FALSE
Discounting      <- 0.03
combination.list <- readRDS("Combination/Combination.list.rds")
ocis             <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$ocis
source("01_Setup/CascadeCEA-Interventions-1-LoadParameterWorkspace-Combination.R")
current.int = interventions[combination.list[[ocis]]]
## RUN the model ##
out.ls.int <- intervention.model.combination(input.parameters = all.params,
current.int = current.int)
out.ls.accum.int <- accum.outcomes.combination(input.parameters = all.params,
pop.in           = out.ls.int[, 1:19, ],
current.int      = current.int,
sums.only        = sums.only)
saveRDS(out.ls.accum.int, paste0("Outputs/CostBreakdown/CostBreakdown-", CITY, "-Strategy-", ocis,"-documented.rds"))
#############################################################################################
## Cascade CEA Model - Combination Interventions
## Determine the proximal stratgies for PSA analyses to estimate proportions being most CE
## ATTENTION: TWO OPTIONS TO CHOOSE FROM, Option 2 tackles potential issue with CS stratgies,
##            should be consistent to the module:
## Last updated: Feb 20, 2020
############################################################################################
rm(list=ls())
library(rstudioapi)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
all.cities <- c("ATL", "BAL", "LA", "MIA", "NYC", "SEA")
## SELECT city ##
CITY <- select.list(all.cities, multiple = FALSE,
title = 'Select city', graphics = FALSE)
npr <- 10        # select number of proximal strategies
combination.list <- readRDS("Combination/Combination.list.rds")
frontier         <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$frontier
ocis             <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$ocis
comparator       <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$comparator
outcome.comb    <- readRDS(paste0("Combination/Outcome-All-Combination-", CITY, "-DM.rds"))
outcome.ref     <- unlist(readRDS(paste0("Inputs/Combination-DM-", CITY, "-refcase-outcomes.rds")))
####################################################################################################
#### OPTION 1 (currently applied): according to absolute NMB, however, might run into problem if OCIS is cost-saving while ICER > 100K compared with comparator
outcome.comb      <- cbind(outcome.comb, index = 1:nrow(outcome.comb))
all_comb          <- outcome.comb[-c(ocis, comparator), c("QALYs.sum", "costs.total.sum", "index")]
all_comb.mx       <- all_comb
all_comb.mx[ , 1] <- all_comb.mx[ , 1] - outcome.ref["QALYs.sum"]
all_comb.mx[ , 2] <- all_comb.mx[ , 2] - outcome.ref["costs.total.sum"]
nmb               <- 100000 * all_comb.mx[ , 1] - all_comb.mx[ , 2]
all_comb.mx       <- cbind(all_comb.mx, nmb)
PSA.sts           <- tail(all_comb.mx[order(all_comb.mx[,"nmb"]), ], n = npr)
saveRDS(PSA.sts[ , "index"], paste0("Combination/PSA-ProximalStrategies-", CITY, ".rds"))
####################################################################################################
#### OPTION 2 (solve the aformentioned problem): according to the distance to the NMB of OCIS:
####          make sure to select the corresponding one in "CascadeCEA-Interventions-3-Analysis-PSA-ProportionMostCE.R"
outcome.comb      <- cbind(outcome.comb, index = 1:nrow(outcome.comb))
all_comb          <- outcome.comb[ , c("QALYs.sum", "costs.total.sum", "index")]
all_comb.mx       <- all_comb
all_comb.mx[ , 1] <- all_comb.mx[ , 1] - outcome.ref["QALYs.sum"]
all_comb.mx[ , 2] <- all_comb.mx[ , 2] - outcome.ref["costs.total.sum"]
nmb               <- 100000 * all_comb.mx[ , 1] - all_comb.mx[ , 2]
nmb.diff          <- abs(nmb - nmb[ocis])
all_comb.mx       <- cbind(all_comb.mx, nmb, nmb.diff)
all_comb.mx       <- all_comb.mx[-c(ocis, comparator), ]
PSA.sts           <- tail(all_comb.mx[order(all_comb.mx[,"nmb.diff"]), ], n = npr)
saveRDS(PSA.sts[ , "index"], paste0("Combination/PSA-ProximalStrategies-", CITY, ".rds"))
#############################################################################
####### Print the included interventions in the proximal combination ########
#############################################################################
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
proximal <- PSA.sts[ , "index"]
for (i in 1:length(frontier)){
print(paste0("####COMBINATION-", proximal[i], ":"))
print(interventions[combination.list[[frontier[i]]]])
}
#############################################################################################
## Cascade CEA Model - Combination Interventions
## Plot the estimated number of new infections during the study time horizon
## Last updated: March 11, 2020
############################################################################################
rm(list=ls())
library(rstudioapi)
library(ggplot2)
library(reshape2)
library(LEMpackHIV)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
# SELECT city ##
# CITY <- select.list(all.cities, multiple = FALSE,
#                     title = 'Select city', graphics = FALSE)
ww <- 1; CITY <- all.cities[[ww]] # Otherwise you can set city by its index
CITY.name  <- c("(A) Atlanta", "(B) Baltimore", "(C) Los Angeles", "(D) Miami", "(E) New York City", "(F) Seattle")
combination.list <- readRDS("Combination/Combination.list.rds")
# Load frontier and ocis #
frontier         <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$frontier
ocis             <- readRDS(paste0("Combination/ProductionFunction-Frontier-", CITY, ".rds"))$ocis
plot.data        <- matrix(0, nrow = length(2016:2040), ncol = (length(frontier)+1))
ref.case.inf     <- t(readRDS(paste0("Inputs/Combination-DM-", CITY, "-refcase-infections.rds"))$out.inf.yr)
ref.case.inf     <- ref.case.inf[-dim(ref.case.inf)[1], ]
plot.data[ , 1]  <- ref.case.inf
colnames(plot.data)    <- rep("Frontiner", ncol(plot.data))
colnames(plot.data)[1] <- "SQ"
colnames(plot.data)[which(frontier == ocis) + 1] <- "OCIS"
comb.outcome <-  readRDS(paste0("Combination/Outcome-All-Combination-", CITY, "-DM.rds"))
plot.data[ , 2:ncol(plot.data)] <- t(comb.outcome[frontier , 7:31])
Year       <- 2016:2040
plot.data  <- cbind(Year, plot.data)
ggplotdata <- melt(data.frame(plot.data), id.vars = c("Year"))
ggplotdata <- rbind(ggplotdata[ggplotdata$variable=="SQ",], subset(ggplotdata[ggplotdata$variable!="SQ",], !(Year %in% c(2015:2018))))
levels(ggplotdata$variable)[1]     <- "Status Quo"
ggplotdata[1:length(2016:2040), 2] <- "Status Quo"
level = unique(ggplotdata$variable)[order(unique(ggplotdata$variable))]
color.panel <- c("firebrick1", "#8dd3c7", "#1f78b4","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#ccebc5","#ffed6f")
color.panel[length(frontier)+1] = "#bc80bd"
plot_out <- ggplot(data = ggplotdata, aes(x=Year, y = value, color = factor(variable, levels = level), alpha = factor(variable, levels = level), size = variable)) +
ggtitle(CITY.name[ww]) +
geom_line() +
scale_color_manual(values= color.panel) +
scale_alpha_manual(values = c(1, rep(0.9, (length(unique(ggplotdata$variable))-1)))) +
scale_size_manual(values = c(rep(1, which(frontier == ocis)), 2, rep(1, (length(frontier) - which(frontier == ocis))))) +
scale_x_continuous(breaks = c(2016, 2020, 2025, 2030, 2035, 2040)) +
ylim(0, max(ggplotdata$value)*1.2) +
geom_vline(xintercept = 2020, linetype = "dashed", color = "grey", size = 0.7) +
geom_vline(xintercept = 2025, linetype = "dashed", color = "grey", size = 0.7) +
geom_vline(xintercept = 2030, linetype = "dashed", color = "grey", size = 0.7) +
labs(y="Number of new HIV infections", x="Year", col = "Strategy", alpha = "Strategy") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title=element_text(size=11), axis.text = element_text(size=10), title=element_text(size=11), legend.text = element_text(size=9), legend.key = element_rect(fill = "transparent", colour = "transparent"))
plot_out
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
devtools::install_github("benenns/LEMHIVpack")
devtools::install_github("benenns/LEMpackTEST")
devtools::install_github("benenns/LEMpackTEST")
library(LEMHIVpack)
# Run model and accumulate outcomes (deterministic)
# This module allows for city selection, loads list of intervention combinations, loads ordinary differential equation functions,
# analysis scenario (deterministic or sensitivity analysis), and loads input parameters and comparators.
# It also provides code for running parallel estimations.
#############################################################################
# 1. SET directory and workspace
#############################################################################
rm(list=ls())
library(rstudioapi)
library(LEMHIVpack)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("01_Setup/CascadeCEA-Interventions-1-LoadBaselineWorkspace.R")
# SELECT city ##
CITY <- select.list(all.cities, multiple = FALSE,
title = 'Select city', graphics = FALSE)
## LOAD list of all combinations, interventions indexed by number in each combination
# if the list does not exist, source("CascadeCEA-Combination-0-Setup-combination.list.R")
combination.list <- readRDS("Combination/Combination.list.rds")
## LOAD ODE function
#source("ModelCoreModules/CascadeCEA-Model-0-Function-ode_model-Combination.R") # Function automatically loaded with LEMHIVpack
## LOAD analysis scenario
case = "DM"  # DM for deterministic, SA for sensitivity analysis
## LOAD all input parameters and comparators
source("01_Setup/CascadeCEA-Interventions-1-LoadParameterWorkspace-Combination.R")
total.comb <- length(combination.list)
tic("Model run")
outcome.comb.mx <- matrix(0, nrow = total.comb, ncol = 44)    ##Initialize combination outcome matrix (to save results)
outcome.comb.mx <- foreach(cc=1:total.comb, .combine=rbind, .export = export.int.model.names
) %dopar% {
comb.eva.func(input.parameters = all.params, current.int = interventions[combination.list[[cc]]])
}
future:::ClusterRegistry("stop")   ##Stop parallel estimations and free cores
colnames(outcome.comb.mx)        <- rep("FILL", 44)
colnames(outcome.comb.mx)[1:6]   <- c("Infections.total-20Y", "SuscPY-over20Y", "Infections.total-10Y", "SuscPY-over10Y", "Infections.total-5Y", "SuscPY-over5Y")
colnames(outcome.comb.mx)[7:32]  <- paste0("Year", c(2015:2040))
colnames(outcome.comb.mx)[33:44] <- c("QALYs.sum", "costs.total.sum", "costs.hru.sum", "costs.art.sum", "costs.art.ini.sum",
"costs.oat.sum", "costs.prep.sum", "costs.prep.tests.sum", "costs.test.sum", "int.costs.sum",
"int.impl.costs.sum", "int.sust.costs.sum")
saveRDS(outcome.comb.mx,   paste0("Combination/Outcome-All-Combination-", CITY, "-DM.rds"))
toc()
devtools::build_readme()
devtools::build_site()
